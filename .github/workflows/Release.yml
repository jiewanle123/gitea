name: Gitea Automated Release Pipeline

on:
  push:
    branches: [ "main" ]
    tags: [ "v*.*.*" ]
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., 1.20.0)"
        required: true

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.set-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set Release Version (Manual)
        if: github.event_name == 'workflow_dispatch'
        id: set-version
        run: |
          version="${{ github.event.inputs.version }}"
          if [[ ! $version =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::Invalid version format. Use semantic versioning (e.g., 1.20.0)"
            exit 1
          fi
          version=${version#v}
          echo "version=v${version}" >> $GITHUB_OUTPUT

      - name: Calculate Next Version (Auto)
        if: github.event_name != 'workflow_dispatch'
        id: set-version-auto
        run: |
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 --match "v*.*.*" 2>/dev/null || echo "v0.0.0")
          NEXT_VERSION="v$(echo "$LATEST_TAG" | awk -F. '{printf "%d.%d.%d", $1, $2, $3+1}')"
          echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT

      - name: Create Git Tag
        uses: actions/github-script@v6
        with:
          script: |
            const tag = '${{ steps.set-version.outputs.version || steps.set-version-auto.outputs.version }}';
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${tag}`,
              sha: context.sha
            });

  build-packages:
    needs: prepare-release
    strategy:
      matrix:
        platform: 
          - { os: ubuntu-latest, goos: linux, goarch: amd64, suffix: "" }
          - { os: ubuntu-latest, goos: linux, goarch: arm64, suffix: "" }
          - { os: macos-latest, goos: darwin, goarch: amd64, suffix: "" }
          - { os: macos-latest, goos: darwin, goarch: arm64, suffix: "" }
          - { os: windows-latest, goos: windows, goarch: amd64, suffix: ".exe" }
    runs-on: ${{ matrix.platform.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare-release.outputs.release_version }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "^1.20"
          cache: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "yarn"

      - name: Install Build Tools
        run: |
          if [[ "${{ matrix.platform.goos }}" == "linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y make gcc
          elif [[ "${{ matrix.platform.goos }}" == "darwin" ]]; then
            brew install make
          fi

      - name: Build Gitea
        env:
          GOOS: ${{ matrix.platform.goos }}
          GOARCH: ${{ matrix.platform.goarch }}
          TAGS: "bindata sqlite sqlite_unlock_notify"
        run: |
          make clean
          make build
          mkdir -p release
          mv gitea release/gitea-${{ matrix.platform.goos }}-${{ matrix.platform.goarch }}${{ matrix.platform.suffix }}

      - name: Package Artifacts
        run: |
          cd release
          if [[ "${{ matrix.platform.goos }}" == "windows" ]]; then
            7z a ../gitea-${{ needs.prepare-release.outputs.release_version }}-${{ matrix.platform.goos }}-${{ matrix.platform.goarch }}.zip *
          else
            tar -czvf ../gitea-${{ needs.prepare-release.outputs.release_version }}-${{ matrix.platform.goos }}-${{ matrix.platform.goarch }}.tar.gz *
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: gitea-${{ matrix.platform.goos }}-${{ matrix.platform.goarch }}
          path: |
            gitea-*.tar.gz
            gitea-*.zip

  create-release:
    needs: [prepare-release, build-packages]
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare-release.outputs.release_version }}
          files: |
            artifacts/**/*
